package io.yhheng.common;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;

/**
 * @version V1.0
 * @author: yhheng
 * @date 2021/1/6
 */
public class ThrowableUtil {


    private ThrowableUtil() { }

    /**
     * Set the {@link StackTraceElement} for the given {@link Throwable}, using the {@link Class} and method name.
     */
    public static <T extends Throwable> T unknownStackTrace(T cause, Class<?> clazz, String method) {
        cause.setStackTrace(new StackTraceElement[] { new StackTraceElement(clazz.getName(), method, null, -1)});
        return cause;
    }

    /**
     * Gets the stack trace from a Throwable as a String.
     *
     * @param cause the {@link Throwable} to be examined
     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method.
     */
    public static String stackTraceToString(Throwable cause) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PrintStream pout = new PrintStream(out);
        cause.printStackTrace(pout);
        pout.flush();
        try {
            return new String(out.toByteArray());
        } finally {
            try {
                out.close();
            } catch (IOException ignore) {
                // ignore as should never happen
            }
        }
    }

//    public static boolean haveSuppressed() {
//        return PlatformDependent.javaVersion() >= 7;
//    }
//
//    @SuppressJava6Requirement(reason = "Throwable addSuppressed is only available for >= 7. Has check for < 7.")
//    public static void addSuppressed(Throwable target, Throwable suppressed) {
//        if (!haveSuppressed()) {
//            return;
//        }
//        target.addSuppressed(suppressed);
//    }

//    public static void addSuppressedAndClear(Throwable target, List<Throwable> suppressed) {
//        addSuppressed(target, suppressed);
//        suppressed.clear();
//    }
//
//    public static void addSuppressed(Throwable target, List<Throwable> suppressed) {
//        for (Throwable t : suppressed) {
//            addSuppressed(target, t);
//        }
//    }
}
